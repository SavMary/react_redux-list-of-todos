{"version":3,"sources":["components/TodoList/TodoList.tsx","store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/api.tsx","App.tsx","index.tsx"],"names":["Option","SET_TODOS","ADD_TODO","SET_USER","setTodosAction","payload","type","initialState","todos","user","store","createStore","state","action","getTodosSelector","getUserSelector","CurrentUser","useSelector","className","id","name","email","phone","API_URL","getTodos","a","fetch","response","json","getUserById","userId","deleteTodo","method","TodoList","dispatch","useDispatch","useState","title","setTitle","selectedOption","setSelectedOption","filteredTodos","setFilteredTodos","useEffect","loadTodosFromServer","todosFromServer","getUser","userFromServer","removeTodo","filteredByTitle","filter","todo","toLowerCase","includes","All","console","log","Active","currT","completed","Completed","visibleTodos","value","onChange","event","target","placeholder","map","option","classNames","checked","readOnly","onClick","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9be616b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { deleteTodo, getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\nenum Option {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUserSelector);\n\n  const [title, setTitle] = useState('');\n  const [selectedOption, setSelectedOption] = useState<Option | string>('all');\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const options = ['all', 'active', 'completed'];\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      setFilteredTodos(todosFromServer);\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUserAction(userFromServer));\n  };\n\n  const removeTodo = async (id: number) => {\n    await deleteTodo(id);\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  useEffect(() => {\n    setFilteredTodos([...todos]);\n  }, [todos]);\n\n  const filteredByTitle = filteredTodos\n    .filter(todo => todo.title.toLowerCase().includes(title.toLowerCase()));\n\n  const visibleTodos = () => {\n    switch (selectedOption) {\n      case Option.All:\n        setFilteredTodos(todos);\n        // eslint-disable-next-line no-console\n        console.log(filteredTodos);\n        break;\n      case Option.Active:\n        setFilteredTodos(currT => currT.filter(todo => !todo.completed));\n        break;\n      case Option.Completed:\n        setFilteredTodos(currT => currT.filter(todo => todo.completed));\n        // eslint-disable-next-line no-console\n        console.log(filteredTodos);\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    visibleTodos();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        value={title}\n        data-cy=\"filterByTitle\"\n        className=\"input\"\n        onChange={(event) => {\n          const { value } = event.target;\n\n          setTitle(value);\n        }}\n        placeholder=\"Enter a todo\"\n      />\n      <div className=\"select\">\n        <select\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredByTitle.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__buttons\">\n                <button\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => removeTodo(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { AnyAction } from 'redux';\nimport { Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\nexport const SET_USER = 'SET_USER';\n\nexport const setTodosAction = (payload: Todo[]): AnyAction => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): AnyAction => ({\n  type: ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User): AnyAction => ({\n  type: SET_USER,\n  payload,\n});\n","import { createStore, AnyAction } from 'redux';\nimport { ADD_TODO, SET_TODOS, SET_USER } from './actions';\nimport { RootState } from '../react-app-env.d';\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","import { RootState } from '../react-app-env';\n\nexport const getTodosSelector = (state: RootState) => state.todos;\n\nexport const getUserSelector = (state: RootState) => state.user;\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (id: number) => {\n  return fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n};\n","import './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bulma/css/bulma.min.css';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}