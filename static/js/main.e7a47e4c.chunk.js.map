{"version":3,"sources":["store/types/types.ts","store/index.ts","components/TodoList/TodoList.tsx","store/selectors.ts","store/actions.ts","components/CurrentUser/CurrentUser.tsx","api/api.tsx","App.tsx","index.tsx"],"names":["ActionType","Option","initialState","todos","user","store","createStore","state","action","type","SET_TODOS","payload","ADD_TODO","SET_USER","getTodosSelector","getUserSelector","setTodosAction","setUserAction","CurrentUser","dispatch","useDispatch","useSelector","className","id","name","email","phone","onClick","API_URL","getTodos","a","fetch","response","json","getUserById","userId","deleteTodo","method","TodoList","query","useState","title","setTitle","selectedOption","setSelectedOption","filteredTodos","setFilteredTodos","filteredTodosByCompleted","filter","todo","completed","filteredByTitle","includes","useEffect","loadTodosFromServer","todosFromServer","getUser","userFromServer","console","log","removeTodo","All","Active","Completed","visibleTodos","value","onChange","event","target","placeholder","map","option","classNames","checked","readOnly","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7a47e4c.chunk.js","sourcesContent":["import { Todo, User } from '../../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  ADD_TODO = 'ADD_TODO',\n  SET_USER = 'SET_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS;\n  payload: Todo[];\n}\n\nexport interface AddTodoAction {\n  type: ActionType.ADD_TODO;\n  payload: Todo;\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER;\n  payload: User | null;\n}\n\nexport type Action = SetTodosAction | AddTodoAction | SetUserAction;\n","import { createStore } from 'redux';\nimport { RootState } from '../react-app-env.d';\nimport { Action, ActionType } from './types/types';\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { deleteTodo, getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport {\n  getActiveTodosSelector, getFilteredTodosByTitleSelector,\n  getTodosSelector, getUserSelector,\n} from '../../store/selectors';\nimport './TodoList.scss';\nimport { Todo } from '../../react-app-env';\n\nenum Option {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState('');\n  const [selectedOption, setSelectedOption] = useState<Option | string>('all');\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const options = ['all', 'active', 'completed'];\n\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUserSelector);\n  const filteredTodosByCompleted = useSelector(getActiveTodosSelector());\n  const filteredByTitle = useSelector(getFilteredTodosByTitleSelector(title));\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      setFilteredTodos(todosFromServer);\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUserAction(userFromServer));\n    } catch {\n      // eslint-disable-next-line no-console\n      console.log('user not found');\n    }\n  };\n\n  const removeTodo = async (id: number) => {\n    await deleteTodo(id);\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  useEffect(() => {\n    setFilteredTodos([...todos]);\n  }, [todos]);\n\n  useEffect(() => {\n    setFilteredTodos(filteredByTitle);\n  }, [title]);\n\n  const visibleTodos = () => {\n    switch (selectedOption) {\n      case Option.All:\n        setFilteredTodos(todos);\n        break;\n      case Option.Active:\n        setFilteredTodos(todos.filter(todo => !todo.completed));\n        break;\n      case Option.Completed:\n        setFilteredTodos(filteredTodosByCompleted);\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    visibleTodos();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <input\n        type=\"text\"\n        value={title}\n        data-cy=\"filterByTitle\"\n        className=\"input\"\n        onChange={(event) => {\n          const { value } = event.target;\n\n          setTitle(value);\n        }}\n        placeholder=\"Enter a todo\"\n      />\n      <div className=\"select\">\n        <select\n          value={selectedOption}\n          onChange={event => setSelectedOption(event.target.value)}\n        >\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              className={classNames(\n                'TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input type=\"checkbox\" checked={todo.completed} readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__buttons\">\n                <button\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected': todo.userId === user?.id,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => removeTodo(todo.id)}\n                >\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { RootState } from '../react-app-env';\n\nexport const getTodosSelector = (state: RootState) => state.todos;\n\nexport const getUserSelector = (state: RootState) => state.user;\n\nexport const getActiveTodosSelector = () => {\n  const filteredTodosSelector = (state: RootState) => {\n    return state.todos.filter(todo => todo.completed);\n  };\n\n  return filteredTodosSelector;\n};\n\nexport const getFilteredTodosByTitleSelector = (query: string) => {\n  return (state: RootState) => {\n    return state.todos.filter(todo => todo.title.includes(query));\n  };\n};\n","import { AnyAction } from 'redux';\nimport { Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\nexport const SET_USER = 'SET_USER';\n\nexport const setTodosAction = (payload: Todo[]): AnyAction => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): AnyAction => ({\n  type: ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null): AnyAction => ({\n  type: SET_USER,\n  payload,\n});\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { setUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const user = useSelector(getUserSelector);\n\n  const clearUser = () => dispatch(setUserAction(null));\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        onClick={clearUser}\n        className=\"button\"\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUserById = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (id: number) => {\n  return fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n};\n","import './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bulma/css/bulma.min.css';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}